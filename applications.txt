A short overview of the newly implemented standalone applications.
And their corresponding servers.

#Pair 1

*Client->GM Application:

Name: DtlspClientGroupOSCORE
Security protocol: DTLS
Security type: PSK
CWT protection: PSK(?)
Run with: TestDtlspRSGroupOSCORE

*GM Application:

Name: TestDtlspRSGroupOSCORE
Security protocol: DTLS
Security type: PSK / RPK(?)
CWT protection: PSK / RPK(?)


#Pair 2

*Client->AS Application:

Name: CoAPClientGroupOSCORE
Security protocol: DTLS
Security type: PSK & RPK
CWT protection: PSK(?)
Run with: CoapASTestServerGroupOSCORE

*AS Application:

Name: CoapASTestServerGroupOSCORE
Security protocol: DTLS
Security type: PSK / RPK
CWT protection: PSK / RPK (supports both depending on config)


#Pair 3

*Client->AS & Client->GM Application:

Seems to work now after some modifications
regarding Token encryption/signing, setting
the audience and configuring the GM.

Name: DtlsAsRsClientGroupOSCORE
Security protocol: DTLS
Security type: PSK & (RKP for Client->AS)
CWT protection: PSK
Run with: CoapASTestServerGroupOSCORE & TestDtlspRSGroupOSCORE
(Be careful to set the AS & RS ports so they do not overlap)


#Pair 4

*Client->GM Application (OSCORE):

Code used for testing with Peter van der Stok during the Hackathon.
OSCORE Client->GM and GM applications. The client generates its own Token followed
by posting it and performing the Join process.

TODO: Add note about changes from Hackathon
TODO: Make a copy of this as a JUnit.

Name: TestOSCoreRSGroupOSCORE
Security protocol: OSCORE
CWT protection: PSK(?)
Run with: OSCoreClientGroupOSCORE

*GM Application (OSCORE):

Name: OSCoreClientGroupOSCORE
Security protocol: OSCORE
CWT protection: RPK


#Pair 5

*Client->GM Application (OSCORE) (old):

Older code starting from DTLS-base. Works but only when using bypass method.

Name: AltTestOSCoreRSGroupOSCORE
Security protocol: OSCORE
CWT protection: PSK
Run with: OSCoreClientGroupOSCORE

*GM Application (OSCORE) (old):

Older code starting from DTLS-base. Works but only when using bypass method.
Used as client with Peter during Hackathon. This was used because it does not use
the actual OSCORE profile but OSCORE with hard-coded context values.

TODO: Add note about changes from Hackathon

Name: AltOSCoreClientGroupOSCORE
Security protocol: OSCORE
CWT protection: PSK


TODO:
RPK handshake for DTLS full procedure
Full procedure using OSCORE profile (OSCORE from Client AS and Client RS)
Create some JUnit tests based on the OSCORE profile examples
Check if "join" parameter is implemented in join request